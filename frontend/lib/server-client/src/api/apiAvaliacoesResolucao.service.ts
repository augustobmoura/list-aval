/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpEvent, HttpHeaders, HttpParameterCodec, HttpParams, HttpResponse } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

import { AvaliacaoResolucaoListaDTO } from '../model/avaliacaoResolucaoListaDTO';
import { AvaliacaoRespostaDTO } from '../model/avaliacaoRespostaDTO';
import { PageAvaliacaoResolucaoListaDTO } from '../model/pageAvaliacaoResolucaoListaDTO';
import { PageAvaliacaoRespostaDTO } from '../model/pageAvaliacaoRespostaDTO';
import { Pageable } from '../model/pageable';

import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';


@Injectable({
  providedIn: 'root',
})
export class ApiAvaliacoesResolucaoService {

  protected basePath = 'https://evening-harbor-96341.herokuapp.com';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
      this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


  /**
   * @param avaliacaoResolucaoListaDTO
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createAvaliacoesResolucao(
    avaliacaoResolucaoListaDTO?: AvaliacaoResolucaoListaDTO,
    observe?: 'body',
    reportProgress?: boolean,
  ): Observable<AvaliacaoResolucaoListaDTO>;
  public createAvaliacoesResolucao(
    avaliacaoResolucaoListaDTO?: AvaliacaoResolucaoListaDTO,
    observe?: 'response',
    reportProgress?: boolean,
  ): Observable<HttpResponse<AvaliacaoResolucaoListaDTO>>;
  public createAvaliacoesResolucao(
    avaliacaoResolucaoListaDTO?: AvaliacaoResolucaoListaDTO,
    observe?: 'events',
    reportProgress?: boolean,
  ): Observable<HttpEvent<AvaliacaoResolucaoListaDTO>>;
  public createAvaliacoesResolucao(
    avaliacaoResolucaoListaDTO?: AvaliacaoResolucaoListaDTO,
    observe: any = 'body',
    reportProgress: boolean = false,
  ): Observable<any> {

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      '*/*',
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<AvaliacaoResolucaoListaDTO>(
      `${this.configuration.basePath}/api/avaliacoesResolucao`,
      avaliacaoResolucaoListaDTO,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param pageable
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findAllAvaliacoesResolucao(
    pageable?: Pageable,
    observe?: 'body',
    reportProgress?: boolean,
  ): Observable<PageAvaliacaoResolucaoListaDTO>;
  public findAllAvaliacoesResolucao(
    pageable?: Pageable,
    observe?: 'response',
    reportProgress?: boolean,
  ): Observable<HttpResponse<PageAvaliacaoResolucaoListaDTO>>;
  public findAllAvaliacoesResolucao(
    pageable?: Pageable,
    observe?: 'events',
    reportProgress?: boolean,
  ): Observable<HttpEvent<PageAvaliacaoResolucaoListaDTO>>;
  public findAllAvaliacoesResolucao(pageable?: Pageable, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (pageable !== undefined && pageable !== null) {
      queryParameters = queryParameters.set('pageable', <any>pageable);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


    return this.httpClient.get<PageAvaliacaoResolucaoListaDTO>(
      `${this.configuration.basePath}/api/avaliacoesResolucao`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param avaliacaoResolucaoListaId
   * @param pageable
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findAllByAvaliacaoResolucaoLista(
    avaliacaoResolucaoListaId: number,
    pageable?: Pageable,
    observe?: 'body',
    reportProgress?: boolean,
  ): Observable<PageAvaliacaoRespostaDTO>;
  public findAllByAvaliacaoResolucaoLista(
    avaliacaoResolucaoListaId: number,
    pageable?: Pageable,
    observe?: 'response',
    reportProgress?: boolean,
  ): Observable<HttpResponse<PageAvaliacaoRespostaDTO>>;
  public findAllByAvaliacaoResolucaoLista(
    avaliacaoResolucaoListaId: number,
    pageable?: Pageable,
    observe?: 'events',
    reportProgress?: boolean,
  ): Observable<HttpEvent<PageAvaliacaoRespostaDTO>>;
  public findAllByAvaliacaoResolucaoLista(
    avaliacaoResolucaoListaId: number,
    pageable?: Pageable,
    observe: any = 'body',
    reportProgress: boolean = false,
  ): Observable<any> {
    if (avaliacaoResolucaoListaId === null || avaliacaoResolucaoListaId === undefined) {
      throw new Error('Required parameter avaliacaoResolucaoListaId was null or undefined when calling findAllByAvaliacaoResolucaoLista.');
    }

    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (pageable !== undefined && pageable !== null) {
      queryParameters = queryParameters.set('pageable', <any>pageable);
    }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


    return this.httpClient.get<PageAvaliacaoRespostaDTO>(
      `${this.configuration.basePath}/api/avaliacoesResolucao/${encodeURIComponent(String(avaliacaoResolucaoListaId))}/respostas`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param avaliacaoResolucaoListaId
   * @param respostaId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findByAvaliacaoResolucaoListaAndResposta(
    avaliacaoResolucaoListaId: number,
    respostaId: string,
    observe?: 'body',
    reportProgress?: boolean,
  ): Observable<AvaliacaoRespostaDTO>;
  public findByAvaliacaoResolucaoListaAndResposta(
    avaliacaoResolucaoListaId: number,
    respostaId: string,
    observe?: 'response',
    reportProgress?: boolean,
  ): Observable<HttpResponse<AvaliacaoRespostaDTO>>;
  public findByAvaliacaoResolucaoListaAndResposta(
    avaliacaoResolucaoListaId: number,
    respostaId: string,
    observe?: 'events',
    reportProgress?: boolean,
  ): Observable<HttpEvent<AvaliacaoRespostaDTO>>;
  public findByAvaliacaoResolucaoListaAndResposta(
    avaliacaoResolucaoListaId: number,
    respostaId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
  ): Observable<any> {
    if (avaliacaoResolucaoListaId === null || avaliacaoResolucaoListaId === undefined) {
      throw new Error(
        'Required parameter avaliacaoResolucaoListaId was null or undefined when calling findByAvaliacaoResolucaoListaAndResposta.');
    }
    if (respostaId === null || respostaId === undefined) {
      throw new Error('Required parameter respostaId was null or undefined when calling findByAvaliacaoResolucaoListaAndResposta.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


    return this.httpClient.get<AvaliacaoRespostaDTO>(
      `${this.configuration.basePath}/api/avaliacoesResolucao/${encodeURIComponent(String(avaliacaoResolucaoListaId))}/${encodeURIComponent(
        String(respostaId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findByIdAvaliacoesResolucao(id: number, observe?: 'body', reportProgress?: boolean): Observable<AvaliacaoResolucaoListaDTO>;
  public findByIdAvaliacoesResolucao(
    id: number,
    observe?: 'response',
    reportProgress?: boolean,
  ): Observable<HttpResponse<AvaliacaoResolucaoListaDTO>>;
  public findByIdAvaliacoesResolucao(
    id: number,
    observe?: 'events',
    reportProgress?: boolean,
  ): Observable<HttpEvent<AvaliacaoResolucaoListaDTO>>;
  public findByIdAvaliacoesResolucao(id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling findByIdAvaliacoesResolucao.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      '*/*',
    ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


    return this.httpClient.get<AvaliacaoResolucaoListaDTO>(
      `${this.configuration.basePath}/api/avaliacoesResolucao/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param pageable
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listListasParaAvaliar(pageable?: Pageable, observe?: 'body', reportProgress?: boolean): Observable<PageAvaliacaoResolucaoListaDTO>;
  public listListasParaAvaliar(
    pageable?: Pageable,
    observe?: 'response',
    reportProgress?: boolean,
  ): Observable<HttpResponse<PageAvaliacaoResolucaoListaDTO>>;
  public listListasParaAvaliar(
    pageable?: Pageable,
    observe?: 'events',
    reportProgress?: boolean,
  ): Observable<HttpEvent<PageAvaliacaoResolucaoListaDTO>>;
  public listListasParaAvaliar(pageable?: Pageable, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (pageable !== undefined && pageable !== null) {
      queryParameters = queryParameters.set('pageable', <any>pageable);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


    return this.httpClient.get<PageAvaliacaoResolucaoListaDTO>(
      `${this.configuration.basePath}/api/avaliacoesResolucao/paraAvaliar`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param pageable
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listMinhasListas(pageable?: Pageable, observe?: 'body', reportProgress?: boolean): Observable<PageAvaliacaoResolucaoListaDTO>;
  public listMinhasListas(
    pageable?: Pageable,
    observe?: 'response',
    reportProgress?: boolean,
  ): Observable<HttpResponse<PageAvaliacaoResolucaoListaDTO>>;
  public listMinhasListas(
    pageable?: Pageable,
    observe?: 'events',
    reportProgress?: boolean,
  ): Observable<HttpEvent<PageAvaliacaoResolucaoListaDTO>>;
  public listMinhasListas(pageable?: Pageable, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (pageable !== undefined && pageable !== null) {
      queryParameters = queryParameters.set('pageable', <any>pageable);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


    return this.httpClient.get<PageAvaliacaoResolucaoListaDTO>(
      `${this.configuration.basePath}/api/avaliacoesResolucao/minhas`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param id
   * @param avaliacaoResolucaoListaDTO
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateAvaliacoesResolucao(
    id: number,
    avaliacaoResolucaoListaDTO?: AvaliacaoResolucaoListaDTO,
    observe?: 'body',
    reportProgress?: boolean,
  ): Observable<AvaliacaoResolucaoListaDTO>;
  public updateAvaliacoesResolucao(
    id: number,
    avaliacaoResolucaoListaDTO?: AvaliacaoResolucaoListaDTO,
    observe?: 'response',
    reportProgress?: boolean,
  ): Observable<HttpResponse<AvaliacaoResolucaoListaDTO>>;
  public updateAvaliacoesResolucao(
    id: number,
    avaliacaoResolucaoListaDTO?: AvaliacaoResolucaoListaDTO,
    observe?: 'events',
    reportProgress?: boolean,
  ): Observable<HttpEvent<AvaliacaoResolucaoListaDTO>>;
  public updateAvaliacoesResolucao(
    id: number,
    avaliacaoResolucaoListaDTO?: AvaliacaoResolucaoListaDTO,
    observe: any = 'body',
    reportProgress: boolean = false,
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling updateAvaliacoesResolucao.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      '*/*',
    ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.put<AvaliacaoResolucaoListaDTO>(
      `${this.configuration.basePath}/api/avaliacoesResolucao/${encodeURIComponent(String(id))}`,
      avaliacaoResolucaoListaDTO,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

}
